// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  username       String?   @unique
  bio            String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // User profile related fields
  coverImage     String?
  location       String?
  website        String?
  occupation     String?
  phoneNumber    String?
  language       String    @default("en")
  theme          String    @default("system")

  // Authentication
  accounts       Account[]
  sessions       Session[]

  // Content
  posts          Post[]
  comments       Comment[]
  reactions      Reaction[]
  savedPosts     SavedPost[]

  // User relationships
  followers      Follow[]        @relation("FollowingUser")
  following      Follow[]        @relation("FollowerUser")
  friends        Friendship[]    @relation("UserFriends")
  friendsOf      Friendship[]    @relation("FriendsOfUser")

  // Messaging
  sentMessages   Message[]       @relation("MessageSender")
  receivedMessages Message[]     @relation("MessageReceiver")

  // Notifications
  notifications  Notification[]  @relation("NotificationRecipient")
  notificationsSent Notification[] @relation("NotificationSender")

  // Interests and topics
  interests      UserInterest[]

  // Health data for Better Me
  healthProfile  HealthProfile?

  // Chat related
  chatParticipations ChatParticipant[]

  // Stories
  stories        Story[]
  viewedStories  StoryView[]

  // Reels
  reels          Reel[]
  reelLikes      ReelLike[]
  reelComments   ReelComment[]

  // Pages
  ownedPages     Page[]          @relation("PageOwner")
  pageRoles      PageRole[]

  // Events
  createdEvents  Event[]
  eventParticipations EventParticipation[]

  // AI related
  aiTokenLimit         AITokenLimit?
  aiContentAnalyses    AIContentAnalysis[]
  aiHealthRecommendations AIHealthRecommendation[]
  aiChatInteractions   AIChatInteraction[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  content     String     @db.Text
  published   Boolean    @default(true)
  visibility  Visibility @default(PUBLIC)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  media       Media[]
  comments    Comment[]
  reactions   Reaction[]
  savedBy     SavedPost[]
  
  aiAnalysis  AIAnalysis?
  
  hashtags    PostHashtag[]

  @@index([userId])
}

model Media {
  id          String     @id @default(cuid())
  type        MediaType
  url         String
  thumbnailUrl String?
  createdAt   DateTime   @default(now())
  
  postId      String?
  post        Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  commentId   String?
  comment     Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  messageId   String?
  message     Message?   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  storyId     String?
  story       Story?     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  reelId      String?
  reel        Reel?      @relation(fields: [reelId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([commentId])
  @@index([messageId])
  @@index([storyId])
  @@index([reelId])
}

model Comment {
  id          String     @id @default(cuid())
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId      String
  post        Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  parentId    String?
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies     Comment[]  @relation("CommentReplies")
  
  reactions   Reaction[]
  media       Media[]

  @@index([userId])
  @@index([postId])
  @@index([parentId])
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  createdAt DateTime     @default(now())
  
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId    String?
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  commentId String?
  comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  
  followerId   String
  follower     User     @relation("FollowerUser", fields: [followerId], references: [id], onDelete: Cascade)
  
  followingId  String
  following    User     @relation("FollowingUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Friendship {
  id        String           @id @default(cuid())
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  userId    String
  user      User             @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  
  friendId  String
  friend    User             @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Chat {
  id            String    @id @default(cuid())
  name          String?
  isGroup       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  participants  ChatParticipant[]
  messages      Message[]
}

model ChatParticipant {
  id        String    @id @default(cuid())
  role      ChatRole  @default(MEMBER)
  createdAt DateTime  @default(now())
  
  chatId    String
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  lastReadMessageId String?
  lastReadMessage  Message?  @relation(fields: [lastReadMessageId], references: [id])

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
}

model Message {
  id               String     @id @default(cuid())
  content          String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  isDeleted        Boolean    @default(false)
  expiresAt        DateTime?
  
  chatId           String
  chat             Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  senderId         String
  sender           User       @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  receiverId       String?
  receiver         User?      @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  media            Media[]
  readBy           ChatParticipant[]

  @@index([chatId])
  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  content     String?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  
  recipientId String
  recipient   User             @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  
  senderId    String?
  sender      User?            @relation("NotificationSender", fields: [senderId], references: [id])
  
  postId      String?
  commentId   String?
  messageId   String?
  
  url         String?

  @@index([recipientId])
  @@index([senderId])
}

model Topic {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  
  userInterests UserInterest[]
  postHashtags  PostHashtag[]
}

model UserInterest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@index([userId])
  @@index([topicId])
}

model PostHashtag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([postId, topicId])
  @@index([postId])
  @@index([topicId])
}

model AIAnalysis {
  id               String   @id @default(cuid())
  sentiment        String?
  topics           String?  @db.Text
  suggestions      String?  @db.Text
  detectedEntities String?  @db.Text
  modelVersion     String?
  createdAt        DateTime @default(now())
  
  postId           String   @unique
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Story {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  media     Media[]
  views     StoryView[]

  @@index([userId])
}

model StoryView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  viewerId  String
  viewer    User     @relation(fields: [viewerId], references: [id], onDelete: Cascade)

  @@unique([storyId, viewerId])
  @@index([storyId])
  @@index([viewerId])
}

model Reel {
  id          String       @id @default(cuid())
  caption     String?
  createdAt   DateTime     @default(now())
  
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  media       Media[]
  likes       ReelLike[]
  comments    ReelComment[]
  
  aiAnalysis  String?      @db.Text

  @@index([userId])
}

model ReelLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  reelId    String
  reel      Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reelId, userId])
  @@index([reelId])
  @@index([userId])
}

model ReelComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  
  reelId    String
  reel      Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reelId])
  @@index([userId])
}

model Page {
  id          String    @id @default(cuid())
  name        String
  handle      String    @unique
  description String?   @db.Text
  logoImage   String?
  coverImage  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  ownerId     String
  owner       User      @relation("PageOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  roles       PageRole[]
  events      Event[]

  @@index([ownerId])
}

model PageRole {
  id        String    @id @default(cuid())
  role      Role      @default(MEMBER)
  createdAt DateTime  @default(now())
  
  pageId    String
  page      Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId])
  @@index([pageId])
  @@index([userId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  location    String?
  startsAt    DateTime
  endsAt      DateTime?
  coverImage  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  pageId      String?
  page        Page?     @relation(fields: [pageId], references: [id], onDelete: SetNull)
  
  creatorId   String
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  participants EventParticipation[]

  @@index([pageId])
  @@index([creatorId])
}

model EventParticipation {
  id        String           @id @default(cuid())
  status    ParticipationStatus @default(GOING)
  createdAt DateTime         @default(now())
  
  eventId   String
  event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

// Health profile for Better Me section
model HealthProfile {
  id              String   @id @default(cuid())
  age             Int?
  weight          Float?
  height          Float?
  gender          String?
  activityLevel   String?
  goals           String?
  dietaryRestrictions String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  mealPlans       MealPlan[]
  workoutPlans    WorkoutPlan[]
  progressRecords ProgressRecord[]

  // AI Recommendations
  aiRecommendations AIHealthRecommendation[]
}

model MealPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  
  profileId   String
  profile     HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  meals       Meal[]

  @@index([profileId])
}

model Meal {
  id          String   @id @default(cuid())
  name        String
  type        String   // Breakfast, Lunch, Dinner, Snack
  calories    Int?
  protein     Int?
  carbs       Int?
  fat         Int?
  recipe      String?  @db.Text
  imageUrl    String?
  
  planId      String
  plan        MealPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
}

model WorkoutPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  
  profileId   String
  profile     HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  workouts    Workout[]

  @@index([profileId])
}

model Workout {
  id          String   @id @default(cuid())
  name        String
  duration    Int?     // in minutes
  type        String   // Cardio, Strength, Flexibility, etc.
  description String?  @db.Text
  videoUrl    String?
  
  planId      String
  plan        WorkoutPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  exercises   WorkoutExercise[]

  @@index([planId])
}

model WorkoutExercise {
  id          String   @id @default(cuid())
  name        String
  sets        Int?
  reps        Int?
  duration    Int?     // in seconds
  restTime    Int?     // in seconds
  notes       String?
  
  workoutId   String
  workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@index([workoutId])
}

model ProgressRecord {
  id           String   @id @default(cuid())
  date         DateTime @default(now())
  weight       Float?
  energyLevel  Int?     // Scale 1-10
  sleepQuality Int?     // Scale 1-10
  notes        String?
  photoUrl     String?
  
  profileId    String
  profile      HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

// AI-related models
model AITokenLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  tier      String   @default("FREE") // FREE, BASIC, PRO, ENTERPRISE
  limit     Int      @default(150)
  usage     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIContentAnalysis {
  id                   String   @id @default(cuid())
  userId               String
  content              String   @db.Text
  sentiment            String
  topics               String
  engagementPrediction String
  modelUsed            String
  tokenUsage           Int
  createdAt            DateTime @default(now())

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AIHealthRecommendation {
  id                String   @id @default(cuid())
  userId            String
  healthProfileId   String
  goals             String
  recommendations   String   @db.Text
  modelUsed         String
  tokenUsage        Int
  createdAt         DateTime @default(now())

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  healthProfile     HealthProfile @relation(fields: [healthProfileId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([healthProfileId])
}

model AIChatInteraction {
  id          String   @id @default(cuid())
  userId      String
  userMessage String   @db.Text
  aiResponse  String   @db.Text
  modelUsed   String
  tokenUsage  Int
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Enums
enum Visibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum ChatRole {
  ADMIN
  MEMBER
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  MENTION
  FRIEND_REQUEST
  MESSAGE
  SYSTEM
}

enum Role {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum ParticipationStatus {
  GOING
  MAYBE
  INVITED
  DECLINED
}
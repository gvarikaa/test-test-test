// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                           @id @default(cuid())
  name                            String?
  email                           String?                          @unique
  emailVerified                   DateTime?
  image                           String?
  hashedPassword                  String?
  username                        String?                          @unique
  bio                             String?
  createdAt                       DateTime                         @default(now())
  updatedAt                       DateTime                         @updatedAt
  coverImage                      String?
  location                        String?
  website                         String?
  occupation                      String?
  phoneNumber                     String?
  language                        String                           @default("en")
  theme                           String                           @default("system")
  aiChatInteractions              AIChatInteraction[]
  aiChatMemories                  AIChatMemory[]
  aiContentAnalyses               AIContentAnalysis[]
  aiHealthRecommendations         AIHealthRecommendation[]
  aiTokenLimit                    AITokenLimit?
  accounts                        Account[]
  behaviorLogs                    UserBehaviorLog[] // User behavior tracking for personalization
  chatParticipations              ChatParticipant[]
  comments                        Comment[]
  createdEvents                   Event[]
  eventComments                   EventComment[]
  eventMedia                      EventMedia[]
  eventParticipations             EventParticipation[]
  eventUpdates                    EventUpdate[]
  following                       Follow[]                         @relation("FollowerUser")
  followers                       Follow[]                         @relation("FollowingUser")
  friendsOf                       Friendship[]                     @relation("FriendsOfUser")
  friends                         Friendship[]                     @relation("UserFriends")
  createdGroups                   Group[]                          @relation("GroupCreator")
  groupBadges                     GroupBadge[]
  groupComments                   GroupComment[]
  groupDiscussionReplies          GroupDiscussionReply[]           @relation("ReplyCreator")
  groupDiscussionTopics           GroupDiscussionTopic[]           @relation("TopicCreator")
  groupEvents                     GroupEvent[]                     @relation("EventCreator")
  groupEventParticipations        GroupEventParticipation[]
  groupFileUploads                GroupFile[]                      @relation("FileUploader")
  sentGroupInvitations            GroupInvitation[]                @relation("InvitingUser")
  groupInvitations                GroupInvitation[]                @relation("InvitedUser")
  groupJoinRequests               GroupJoinRequest[]
  groupMemberships                GroupMember[]
  groupPolls                      GroupPoll[]                      @relation("PollCreator")
  groupPollVotes                  GroupPollVote[]
  groupPosts                      GroupPost[]
  groupReactions                  GroupReaction[]
  groupReports                    GroupReport[]                    @relation("ReportCreator")
  groupReportedContent            GroupReport[]                    @relation("ReportedUser")
  healthProfile                   HealthProfile?
  messageReactions                MessageReaction[]
  messageMentions                 MessageMention[]
  chatPollVotes                   ChatPollVote[]
  chatBotCreator                  ChatBot[]
  chatPreferences                 UserChatPreference?
  interests                       UserInterest[]
  preferences                     UserPreference[]
  receivedMessages                Message[]                        @relation("MessageReceiver")
  recommendations                 UserRecommendation[] // Personalized recommendations
  sentMessages                    Message[]                        @relation("MessageSender")
  notifications                   Notification[]                   @relation("NotificationRecipient")
  notificationsSent               Notification[]                   @relation("NotificationSender")
  notificationCategoryPreferences NotificationCategoryPreference[]
  notificationGroupPreferences    NotificationGroupPreference[]
  notificationPreferences         NotificationPreference?
  ownedPages                      Page[]                           @relation("PageOwner")
  pageRoles                       PageRole[]
  posts                           Post[]
  pushDevices                     PushDevice[]
  reactions                       Reaction[]
  reels                           Reel[]
  reelComments                    ReelComment[]
  reelLikes                       ReelLike[]
  reelShares                      ReelShare[]
  reelViews                       ReelView[]
  savedPosts                      SavedPost[]
  savedReels                      SavedReel[]
  sessions                        Session[]
  stories                         Story[]
  viewedStories                   StoryView[]
  mentionedInPosts                PostMention[]                    @relation("MentionedUser")
  mentionerInPosts                PostMention[]                    @relation("MentionerUser")
  postShares                      PostShare[]
  postReports                     PostReport[]                     @relation("PostReporter")
  moderatedReports                PostReport[]                     @relation("ReportModerator")
  pollVotes                       PollVote[]
  postViews                       PostView[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id               String     @id @default(cuid())
  content          String     @db.Text
  formattedContent Json? // For rich text content storing
  type             PostType   @default(TEXT)
  published        Boolean    @default(true)
  visibility       Visibility @default(PUBLIC)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  scheduledFor     DateTime? // For scheduling posts
  isEdited         Boolean    @default(false)
  editedAt         DateTime? // When post was last edited
  userId           String
  location         String? // Location name
  latitude         Float? // Geo coordinates
  longitude        Float? // Geo coordinates
  isPinned         Boolean    @default(false)
  viewCount        Int        @default(0)
  shareCount       Int        @default(0)
  isHidden         Boolean    @default(false)
  hiddenReason     String? // Reason for hiding

  // Relations
  aiAnalysis      AIAnalysis?
  comments        Comment[]
  media           Media[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashtags        PostHashtag[]
  reactions       Reaction[]
  savedBy         SavedPost[]
  mentions        PostMention[]
  shares          PostShare[]
  reports         PostReport[]
  poll            Poll?
  urlPreviews     UrlPreview[]
  audioRecordings AudioRecording[]
  views           PostView[]
  analytics       PostAnalytics?

  @@index([userId])
  @@index([type])
  @@index([visibility])
  @@index([createdAt])
  @@index([isPinned])
}

model Media {
  id           String     @id @default(cuid())
  type         MediaType
  url          String
  thumbnailUrl String?
  createdAt    DateTime   @default(now())
  postId       String?
  commentId    String?
  messageId    String?
  storyId      String?
  reelId       String?
  bitrate      Int?
  codec        String?
  duration     Float?
  fileSize     Int?
  groupPostId  String?
  height       Int?
  resolution   String?
  width        Int?
  comment      Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  groupPost    GroupPost? @relation(fields: [groupPostId], references: [id], onDelete: Cascade)
  message      Message?   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  post         Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  reel         Reel?      @relation(fields: [reelId], references: [id], onDelete: Cascade)
  story        Story?     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([commentId])
  @@index([messageId])
  @@index([storyId])
  @@index([reelId])
  @@index([groupPostId])
}

model Comment {
  id              String           @id @default(cuid())
  content         String           @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  postId          String
  parentId        String?
  parent          Comment?         @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[]        @relation("CommentReplies")
  post            Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  media           Media[]
  reactions       Reaction[]
  commentAnalysis CommentAnalysis?
  audioRecordings AudioRecording[]

  @@index([userId])
  @@index([postId])
  @@index([parentId])
}

model CommentAnalysis {
  id        String   @id @default(cuid())
  commentId String   @unique
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model DiscussionAnalysis {
  id        String   @id @default(cuid())
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  createdAt DateTime     @default(now())
  userId    String
  postId    String?
  commentId String?
  comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("FollowerUser", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowingUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Friendship {
  id        String           @id @default(cuid())
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  friendId  String
  friend    User             @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  user      User             @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Chat {
  id               String            @id @default(cuid())
  name             String?
  isGroup          Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  description      String?           @db.Text
  image            String?
  coverImage       String?
  isPinned         Boolean           @default(false)
  isArchived       Boolean           @default(false)
  lastMessageAt    DateTime?
  themeColor       String?
  customBackground String?
  participants     ChatParticipant[]
  messages         Message[]
  settings         ChatSettings?
  threads          ChatThread[]
  calls            Call[]
  sharedMedia      SharedMedia[]
  polls            ChatPoll[]
  pinned           PinnedMessage[]
  joinCode         String?           @unique
}

model ChatParticipant {
  id                  String            @id @default(cuid())
  role                ChatRole          @default(MEMBER)
  createdAt           DateTime          @default(now())
  chatId              String
  userId              String
  lastReadMessageId   String?
  nickname            String?
  isAdmin             Boolean           @default(false)
  isBlocked           Boolean           @default(false)
  isMuted             Boolean           @default(false)
  muteUntil           DateTime?
  notificationSetting String            @default("ALL")
  isTyping            Boolean           @default(false)
  lastActiveAt        DateTime?
  joinedVia           String?
  invitedBy           String?
  metaData            Json?
  hasLeftChat         Boolean           @default(false)
  leftAt              DateTime?
  chat                Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  lastReadMessage     Message?          @relation(fields: [lastReadMessageId], references: [id])
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollVotes           ChatPollVote[]
  callParticipations  CallParticipant[]

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
}

model Message {
  id               String            @id @default(cuid())
  content          String?           @db.Text
  translatedText   String?           @db.Text
  sourceLanguage   String?
  targetLanguage   String?
  messageType      MessageType       @default(TEXT)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isDeleted        Boolean           @default(false)
  expiresAt        DateTime?
  chatId           String
  senderId         String
  receiverId       String?
  isAI             Boolean           @default(false)
  reactions        MessageReaction[]
  readBy           ChatParticipant[]
  media            Media[]
  replyToId        String?
  replyTo          Message?          @relation("MessageReplies", fields: [replyToId], references: [id])
  replies          Message[]         @relation("MessageReplies")
  isForwarded      Boolean           @default(false)
  originalChatId   String?
  originalSenderId String?
  mentions         MessageMention[]
  callRecord       CallRecord?
  voiceTranscript  String?           @db.Text
  waveform         String?
  chat             Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  receiver         User?             @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender           User              @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  pollId           String?           @unique
  poll             ChatPoll?         @relation(fields: [pollId], references: [id])

  @@index([chatId])
  @@index([senderId])
  @@index([receiverId])
  @@index([replyToId])
  @@index([messageType])
}

model Notification {
  id                      String                      @id @default(cuid())
  type                    NotificationType
  content                 String?                     @db.Text
  isRead                  Boolean                     @default(false)
  createdAt               DateTime                    @default(now())
  recipientId             String
  senderId                String?
  postId                  String?
  commentId               String?
  messageId               String?
  url                     String?
  actionLabel             String?
  actionUrl               String?
  deliveredAt             DateTime?
  deliveryStatus          NotificationDeliveryStatus? @default(PENDING)
  expiresAt               DateTime?
  groupBadgeId            String?
  groupCommentId          String?
  groupEventId            String?
  groupFileId             String?
  groupId                 String?
  groupPollId             String?
  groupPostId             String?
  healthProfileId         String?
  imageUrl                String?
  isActionable            Boolean                     @default(false)
  isMuted                 Boolean                     @default(false)
  metadata                Json?
  overrideUserPreferences Boolean                     @default(false)
  pageId                  String?
  priority                NotificationPriority        @default(NORMAL)
  readAt                  DateTime?
  group                   Group?                      @relation(fields: [groupId], references: [id])
  page                    Page?                       @relation(fields: [pageId], references: [id])
  recipient               User                        @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender                  User?                       @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([recipientId])
  @@index([senderId])
  @@index([type])
  @@index([createdAt])
  @@index([isRead])
  @@index([groupId])
  @@index([pageId])
}

model Topic {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?        @db.Text
  createdAt     DateTime       @default(now())
  postHashtags  PostHashtag[]
  reelHashtags  ReelHashtag[]
  userInterests UserInterest[]
}

model UserInterest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  topicId   String
  weight    Float    @default(1.0) // Interest weight (0-1)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@index([userId])
  @@index([topicId])
}

model UserBehaviorLog {
  id           String   @id @default(cuid())
  userId       String
  behaviorType String
  contentId    String
  contentType  String
  timestamp    DateTime @default(now())
  duration     Int?
  metadata     Json?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([contentId])
  @@index([contentType])
  @@index([behaviorType])
  @@index([timestamp])
}

model KeyValueStore {
  key       String   @id
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRecommendation {
  id          String    @id @default(cuid())
  userId      String
  contentId   String
  contentType String
  score       Float
  reason      String
  source      String
  isViewed    Boolean   @default(false)
  isClicked   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  viewedAt    DateTime?
  clickedAt   DateTime?
  metadata    Json?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([contentId])
  @@index([contentType])
  @@index([source])
  @@index([createdAt])
}

model PostHashtag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  topicId   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([postId, topicId])
  @@index([postId])
  @@index([topicId])
}

model AIAnalysis {
  id               String   @id @default(cuid())
  sentiment        String?
  topics           String?  @db.Text
  suggestions      String?  @db.Text
  detectedEntities String?  @db.Text
  modelVersion     String?
  createdAt        DateTime @default(now())
  postId           String   @unique
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Story {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  expiresAt DateTime
  userId    String
  media     Media[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  views     StoryView[]

  @@index([userId])
}

model StoryView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  storyId   String
  viewerId  String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  viewer    User     @relation(fields: [viewerId], references: [id], onDelete: Cascade)

  @@unique([storyId, viewerId])
  @@index([storyId])
  @@index([viewerId])
}

model Reel {
  id               String         @id @default(cuid())
  caption          String?        @db.Text
  createdAt        DateTime       @default(now())
  userId           String
  aiAnalysis       String?        @db.Text
  aspectRatio      String?
  commentCount     Int            @default(0)
  duration         Float?
  isOriginalAudio  Boolean        @default(true)
  isPublished      Boolean        @default(true)
  likeCount        Int            @default(0)
  processingStatus String         @default("COMPLETED")
  shareCount       Int            @default(0)
  thumbnailUrl     String?
  updatedAt        DateTime       @updatedAt
  viewCount        Int            @default(0)
  visibility       Visibility     @default(PUBLIC)
  media            Media[]
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  audio            ReelAudio?
  comments         ReelComment[]
  hashtags         ReelHashtag[]
  likes            ReelLike[]
  shares           ReelShare[]
  views            ReelView[]
  savedBy          SavedReel[]
  categories       ReelCategory[] @relation("ReelToReelCategory")
  effects          ReelEffect[]   @relation("ReelToReelEffect")

  @@index([userId])
  @@index([viewCount])
  @@index([createdAt])
  @@index([likeCount])
}

model ReelLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  reelId    String
  userId    String
  reel      Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reelId, userId])
  @@index([reelId])
  @@index([userId])
}

model ReelComment {
  id        String        @id @default(cuid())
  content   String        @db.Text
  createdAt DateTime      @default(now())
  reelId    String
  userId    String
  likeCount Int           @default(0)
  parentId  String?
  updatedAt DateTime      @updatedAt
  parent    ReelComment?  @relation("ReelCommentReplies", fields: [parentId], references: [id])
  replies   ReelComment[] @relation("ReelCommentReplies")
  reel      Reel          @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reelId])
  @@index([userId])
  @@index([parentId])
}

model ReelView {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  watchDuration  Float?
  completionRate Float?
  reelId         String
  userId         String
  deviceInfo     String?
  location       String?
  reel           Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reelId])
  @@index([userId])
  @@index([createdAt])
}

model ReelShare {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  platform  SharePlatform
  reelId    String
  userId    String
  reel      Reel          @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reelId])
  @@index([userId])
}

model SavedReel {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  userId     String
  reelId     String
  playlistId String?
  playlist   ReelPlaylist? @relation(fields: [playlistId], references: [id])
  reel       Reel          @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reelId])
  @@index([userId])
  @@index([reelId])
  @@index([playlistId])
}

model ReelHashtag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  reelId    String
  topicId   String
  reel      Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([reelId, topicId])
  @@index([reelId])
  @@index([topicId])
}

model ReelAudio {
  id          String   @id @default(cuid())
  title       String
  artistName  String?
  duration    Float
  audioUrl    String
  waveformUrl String?
  isOriginal  Boolean  @default(false)
  useCount    Int      @default(0)
  createdAt   DateTime @default(now())
  reelId      String?  @unique
  licenseInfo String?
  attribution String?
  reel        Reel?    @relation(fields: [reelId], references: [id])

  @@index([title])
  @@index([useCount])
}

model ReelCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  iconUrl   String?
  createdAt DateTime @default(now())
  reels     Reel[]   @relation("ReelToReelCategory")

  @@index([name])
}

model ReelEffect {
  id          String     @id @default(cuid())
  name        String
  type        EffectType
  description String?    @db.Text
  iconUrl     String?
  settings    Json?
  createdAt   DateTime   @default(now())
  reels       Reel[]     @relation("ReelToReelEffect")

  @@index([name])
  @@index([type])
}

model ReelPlaylist {
  id          String      @id @default(cuid())
  name        String
  description String?     @db.Text
  isPrivate   Boolean     @default(false)
  coverImage  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  savedReels  SavedReel[]

  @@index([userId])
}

model Page {
  id            String         @id @default(cuid())
  name          String
  handle        String         @unique
  description   String?        @db.Text
  logoImage     String?
  coverImage    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ownerId       String
  events        Event[]
  notifications Notification[]
  owner         User           @relation("PageOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  roles         PageRole[]

  @@index([ownerId])
}

model PageRole {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  pageId    String
  userId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId])
  @@index([pageId])
  @@index([userId])
}

model Event {
  id                String               @id @default(cuid())
  title             String
  description       String?              @db.Text
  location          String?
  startsAt          DateTime
  endsAt            DateTime?
  coverImage        String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  pageId            String?
  creatorId         String
  categoryId        String?
  isOnline          Boolean              @default(false)
  isPrivate         Boolean              @default(false)
  isRecurring       Boolean              @default(false)
  maxParticipants   Int?
  onlineUrl         String?
  recurrenceEndDate DateTime?
  recurrencePattern String?
  category          EventCategory?       @relation(fields: [categoryId], references: [id])
  creator           User                 @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  page              Page?                @relation(fields: [pageId], references: [id])
  comments          EventComment[]
  media             EventMedia[]
  participants      EventParticipation[]
  eventTags         EventTagRelation[]
  updates           EventUpdate[]

  @@index([pageId])
  @@index([creatorId])
  @@index([categoryId])
  @@index([startsAt])
  @@index([isPrivate])
}

model EventParticipation {
  id               String              @id @default(cuid())
  status           ParticipationStatus @default(GOING)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  eventId          String
  userId           String
  isWaitlisted     Boolean             @default(false)
  waitlistPosition Int?
  event            Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
}

model EventComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   String
  userId    String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model EventUpdate {
  id          String   @id @default(cuid())
  content     String   @db.Text
  isImportant Boolean  @default(false)
  createdAt   DateTime @default(now())
  eventId     String
  userId      String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model EventMedia {
  id        String    @id @default(cuid())
  url       String
  type      MediaType
  createdAt DateTime  @default(now())
  eventId   String
  userId    String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model EventCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  icon        String?
  createdAt   DateTime @default(now())
  events      Event[]
}

model EventTag {
  id        String             @id @default(cuid())
  name      String             @unique
  createdAt DateTime           @default(now())
  events    EventTagRelation[]
}

model EventTagRelation {
  id      String   @id @default(cuid())
  eventId String
  tagId   String
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag     EventTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([eventId, tagId])
  @@index([eventId])
  @@index([tagId])
}

model HealthProfile {
  id                  String                   @id @default(cuid())
  age                 Int?
  weight              Float?
  height              Float?
  gender              String?
  activityLevel       String?
  goals               String?
  dietaryRestrictions String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  userId              String                   @unique
  aiRecommendations   AIHealthRecommendation[]
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealPlans           MealPlan[]
  progressRecords     ProgressRecord[]
  workoutPlans        WorkoutPlan[]
}

model MealPlan {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  profileId   String
  meals       Meal[]
  profile     HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Meal {
  id       String   @id @default(cuid())
  name     String
  type     String
  calories Int?
  protein  Int?
  carbs    Int?
  fat      Int?
  recipe   String?
  imageUrl String?
  planId   String
  plan     MealPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
}

model WorkoutPlan {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  profileId   String
  workouts    Workout[]
  profile     HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Workout {
  id          String            @id @default(cuid())
  name        String
  duration    Int?
  type        String
  description String?
  videoUrl    String?
  planId      String
  plan        WorkoutPlan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  exercises   WorkoutExercise[]

  @@index([planId])
}

model WorkoutExercise {
  id        String  @id @default(cuid())
  name      String
  sets      Int?
  reps      Int?
  duration  Int?
  restTime  Int?
  notes     String?
  workoutId String
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@index([workoutId])
}

model ProgressRecord {
  id           String        @id @default(cuid())
  date         DateTime      @default(now())
  weight       Float?
  energyLevel  Int?
  sleepQuality Int?
  notes        String?
  photoUrl     String?
  profileId    String
  profile      HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
  CUSTOM
}

enum SubscriptionPeriod {
  MONTHLY
  QUARTERLY
  BIANNUAL
  ANNUAL
}

enum PreferredModel {
  GEMINI_1_5_PRO
  GEMINI_2_5_PRO
  AUTO
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CRYPTO
  MANUAL
  NONE
}

model AITokenLimit {
  id                   String             @id @default(cuid())
  userId               String             @unique
  tier                 SubscriptionTier   @default(FREE)
  limit                Int                @default(150) // Daily token limit
  usage                Int                @default(0) // Current usage toward daily limit
  resetAt              DateTime // When daily limit resets
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenUsageStats      AITokenUsageStat[]
  monthlyAllocation    Int                @default(5000) // Monthly token allocation
  previousMonthCarry   Int                @default(0) // Tokens carried over from previous month
  bonusTokens          Int                @default(0) // Bonus tokens from promotions
  lifetimeUsage        Int                @default(0) // Total lifetime token usage
  lifetimeAllocated    Int                @default(0) // Total lifetime token allocation
  lastActivity         DateTime? // Last AI activity timestamp
  tokenRefreshSchedule String? // Cron expression for token refresh (tier-dependent)

  // New fields for enhanced subscription system
  subscriptionStartedAt DateTime           @default(now()) // When subscription started
  subscriptionEndsAt    DateTime? // When subscription ends
  subscriptionPeriod    SubscriptionPeriod @default(MONTHLY) // Subscription period length
  subscriptionId        String? // External subscription ID
  subscriptionActive    Boolean            @default(true) // Whether subscription is active
  preferredModel        PreferredModel     @default(AUTO) // User's preferred AI model
  modelAllocation       Json? // Allocation percentages between models
  customTokens          Int? // For CUSTOM tier only - token amount
  carryOverLimit        Int                @default(0) // Max tokens that can be carried over
  carryOverPercent      Int                @default(0) // % of unused tokens carried (0-100)
  autoRenew             Boolean            @default(false) // Whether to auto-renew subscription
  paymentMethod         PaymentMethod      @default(NONE) // Payment method used
  lastBillingDate       DateTime? // Date of last billing
  nextBillingDate       DateTime? // Date of next billing
  discountPercent       Int                @default(0) // Any discount applied (0-100)
  discountReason        String? // Reason for discount

  // Relations
  purchases TokenPurchaseHistory[] // Purchase history
}

model TokenPurchaseHistory {
  id               String             @id @default(cuid())
  tokenLimitId     String
  amount           Int // Number of tokens purchased
  cost             Float // Cost of purchase in currency
  currency         String             @default("USD")
  purchaseDate     DateTime           @default(now())
  expiryDate       DateTime? // When tokens expire if applicable
  tier             SubscriptionTier
  period           SubscriptionPeriod
  paymentMethod    PaymentMethod
  transactionId    String? // External payment processor transaction ID
  isRecurring      Boolean            @default(false)
  isCancelled      Boolean            @default(false)
  cancellationDate DateTime?
  notes            String?
  metadata         Json?
  model            PreferredModel     @default(AUTO)
  invoiceUrl       String? // URL to invoice document
  receiptUrl       String? // URL to receipt document
  discountPercent  Int                @default(0)
  discountCode     String?
  tokenLimit       AITokenLimit       @relation(fields: [tokenLimitId], references: [id], onDelete: Cascade)

  @@index([tokenLimitId])
  @@index([purchaseDate])
  @@index([tier])
  @@index([model])
}

model AITokenUsageStat {
  id               String         @id @default(cuid())
  tokenLimitId     String
  operationType    String // Type of operation (chat, content analysis, recommendation, etc.)
  tokensUsed       Int // Number of tokens used in this operation
  model            PreferredModel // Model used for the operation
  timestamp        DateTime       @default(now())
  endpoint         String? // API endpoint or function called
  featureArea      String? // Area of the application (health, chat, content, etc.)
  prompt           String? // The prompt used (sanitized/truncated for privacy)
  promptTokens     Int? // Number of tokens in the prompt
  completionTokens Int? // Number of tokens in the completion
  success          Boolean        @default(true) // Whether the operation was successful
  errorCode        String? // Error code if the operation failed
  metadata         Json? // Additional metadata for analysis
  responseTime     Int? // Response time in milliseconds
  costMultiplier   Float          @default(1.0) // Model-specific cost multiplier
  contentType      String? // Type of content (post, chat, health, etc.)
  contentId        String? // ID of the content being analyzed
  userAction       String? // Specific user action that triggered this usage
  tokenCost        Float? // Calculated cost in tokens after model multiplier
  featureCategory  String? // High-level category (creation, analysis, recommendation)
  associatedUrl    String? // URL associated with this operation
  tokenLimit       AITokenLimit   @relation(fields: [tokenLimitId], references: [id], onDelete: Cascade)

  @@index([tokenLimitId])
  @@index([timestamp])
  @@index([operationType])
  @@index([model])
  @@index([featureArea])
  @@index([featureCategory])
  @@index([contentType, contentId])
}

model AISubscriptionPlan {
  id                 String             @id @default(cuid())
  name               String
  tier               SubscriptionTier
  period             SubscriptionPeriod
  tokenAmount        Int // Base token amount for this plan
  costPerPeriod      Float // Cost per period
  currency           String             @default("USD")
  description        String?
  features           Json // Array of included features
  isActive           Boolean            @default(true)
  carryOverPercent   Int                @default(0) // % of unused tokens carried over
  maxCarryOver       Int                @default(0) // Max tokens that can be carried over
  discountPercentage Json? // Discounts for longer periods {QUARTERLY: 10, BIANNUAL: 15, ANNUAL: 20}
  modelPricing       Json? // Model-specific pricing {GEMINI_1_5_PRO: 1.0, GEMINI_2_5_PRO: 1.4}
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  displayOrder       Int                @default(0) // Order in which plans are displayed
  popularPlan        Boolean            @default(false) // Whether this is marked as a popular plan
  maxTokensPerDay    Int? // Max tokens per day (rate limiting)
  maxTokensPerHour   Int? // Max tokens per hour (rate limiting)

  @@unique([tier, period])
  @@index([tier])
  @@index([period])
  @@index([isActive])
  @@index([displayOrder])
}

model AITokenUsageAggregation {
  id                  String    @id @default(cuid())
  userId              String
  date                DateTime // Day/month being aggregated
  aggregationType     String // "daily", "monthly", "feature", "model", etc.
  feature             String? // Feature area if aggregating by feature
  model               String? // Model if aggregating by model
  tokenCount          Int // Total tokens used
  operationCount      Int // Number of operations
  averageResponseTime Int? // Average response time
  successRate         Float? // Success rate (0-1)
  peakUsageTime       DateTime? // Time of peak usage
  costInTokens        Float? // Cost in tokens (after model multiplier)
  metadata            Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([userId, date, aggregationType, feature, model])
  @@index([userId])
  @@index([date])
  @@index([aggregationType])
  @@index([feature])
  @@index([model])
}

model AIContentAnalysis {
  id                   String   @id @default(cuid())
  userId               String
  content              String   @db.Text
  sentiment            String
  topics               String   @db.Text
  engagementPrediction String
  modelUsed            String
  tokenUsage           Int
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AIHealthRecommendation {
  id              String        @id @default(cuid())
  userId          String
  healthProfileId String
  goals           String        @db.Text
  recommendations String        @db.Text
  modelUsed       String
  tokenUsage      Int
  createdAt       DateTime      @default(now())
  healthProfile   HealthProfile @relation(fields: [healthProfileId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([healthProfileId])
}

model NotificationPreference {
  id                 String   @id @default(cuid())
  emailEnabled       Boolean  @default(true)
  pushEnabled        Boolean  @default(true)
  inAppEnabled       Boolean  @default(true)
  smsEnabled         Boolean  @default(false)
  quietHoursEnabled  Boolean  @default(false)
  quietHoursStart    String?
  quietHoursEnd      String?
  quietHoursDays     String?
  weekendMuteEnabled Boolean  @default(false)
  digestEnabled      Boolean  @default(false)
  digestFrequency    String?  @default("DAILY")
  digestDay          String?
  digestTime         String?
  updatedAt          DateTime @updatedAt
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationCategoryPreference {
  id           String               @id @default(cuid())
  category     String
  inAppEnabled Boolean              @default(true)
  emailEnabled Boolean              @default(false)
  pushEnabled  Boolean              @default(true)
  smsEnabled   Boolean              @default(false)
  muteAll      Boolean              @default(false)
  muteUntil    DateTime?
  priority     NotificationPriority @default(NORMAL)
  updatedAt    DateTime             @updatedAt
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
  @@index([userId])
}

model NotificationGroupPreference {
  id                String    @id @default(cuid())
  inAppEnabled      Boolean   @default(true)
  emailEnabled      Boolean   @default(false)
  pushEnabled       Boolean   @default(true)
  muteAll           Boolean   @default(false)
  muteUntil         DateTime?
  postsEnabled      Boolean   @default(true)
  commentsEnabled   Boolean   @default(true)
  eventsEnabled     Boolean   @default(true)
  pollsEnabled      Boolean   @default(true)
  mentionsEnabled   Boolean   @default(true)
  announcementsOnly Boolean   @default(false)
  updatedAt         DateTime  @updatedAt
  userId            String
  groupId           String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model PushDevice {
  id          String   @id @default(cuid())
  deviceToken String   @unique
  platform    String
  deviceName  String?
  deviceModel String?
  osVersion   String?
  appVersion  String?
  isActive    Boolean  @default(true)
  lastActive  DateTime @default(now())
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceToken])
}

model ScheduledNotification {
  id                String                @id @default(cuid())
  type              NotificationType
  content           String?               @db.Text
  scheduledFor      DateTime
  recurring         Boolean               @default(false)
  recurrencePattern String?
  recurrenceEnd     DateTime?
  channels          String?
  priority          NotificationPriority  @default(NORMAL)
  status            String                @default("PENDING")
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  recipientId       String?
  segmentId         String?
  groupId           String?
  entityType        String?
  entityId          String?
  metadata          Json?
  sentCount         Int                   @default(0)
  openCount         Int                   @default(0)
  clickCount        Int                   @default(0)
  templateId        String?
  template          NotificationTemplate? @relation(fields: [templateId], references: [id])

  @@index([recipientId])
  @@index([scheduledFor])
  @@index([status])
  @@index([groupId])
}

model NotificationTemplate {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?                 @db.Text
  type                   NotificationType
  titleTemplate          String?
  contentTemplate        String                  @db.Text
  actionLabel            String?
  actionUrlTemplate      String?
  imageUrl               String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  variables              Json?
  channels               String
  priority               NotificationPriority    @default(NORMAL)
  scheduledNotifications ScheduledNotification[]
}

model NotificationLog {
  id             String              @id @default(cuid())
  notificationId String
  userId         String
  channel        NotificationChannel
  event          String
  deviceId       String?
  deviceInfo     Json?
  timestamp      DateTime            @default(now())
  success        Boolean             @default(true)
  errorMessage   String?
  metadata       Json?

  @@index([notificationId])
  @@index([userId])
  @@index([channel])
  @@index([event])
  @@index([timestamp])
}

model AIChatInteraction {
  id          String   @id @default(cuid())
  userId      String
  userMessage String   @db.Text
  aiResponse  String   @db.Text
  modelUsed   String
  tokenUsage  Int
  createdAt   DateTime @default(now())
  personality String?  @default("default")
  metadata    Json?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model AIChatMemory {
  id         String    @id @default(cuid())
  userId     String
  type       String // short-term, long-term, episodic, semantic
  content    String    @db.Text
  importance Int       @default(5) // 1-10 scale
  context    String?   @db.Text
  metadata   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiresAt  DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([importance])
  @@index([createdAt])
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([userId])
  @@index([key])
}

model Group {
  id                  String                 @id @default(cuid())
  name                String
  handle              String                 @unique
  description         String?                @db.Text
  privacy             GroupPrivacy           @default(PUBLIC)
  rules               String?                @db.Text
  logoImage           String?
  coverImage          String?
  isVerified          Boolean                @default(false)
  autoApproveMembers  Boolean                @default(true)
  allowMemberPosts    Boolean                @default(true)
  requirePostApproval Boolean                @default(false)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  creatorId           String
  creator             User                   @relation("GroupCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  badges              GroupBadge[]
  discussionTopics    GroupDiscussionTopic[]
  events              GroupEvent[]
  files               GroupFile[]
  invitations         GroupInvitation[]
  joinRequests        GroupJoinRequest[]
  members             GroupMember[]
  polls               GroupPoll[]
  posts               GroupPost[]
  reports             GroupReport[]
  settings            GroupSettings?
  topics              GroupTopic[]
  notifications       Notification[]

  @@index([creatorId])
}

model GroupSettings {
  id                          String  @id @default(cuid())
  welcomeMessage              String? @db.Text
  primaryColor                String?
  enableMemberList            Boolean @default(true)
  enableDiscussions           Boolean @default(true)
  enableFiles                 Boolean @default(true)
  enableEvents                Boolean @default(true)
  enablePolls                 Boolean @default(true)
  postNotificationsEnabled    Boolean @default(true)
  commentNotificationsEnabled Boolean @default(true)
  eventNotificationsEnabled   Boolean @default(true)
  allowNonMemberView          Boolean @default(true)
  groupId                     String  @unique
  group                       Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model GroupTopic {
  id          String      @id @default(cuid())
  name        String
  description String?
  color       String?
  icon        String?
  createdAt   DateTime    @default(now())
  groupId     String
  posts       GroupPost[]
  group       Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, name])
  @@index([groupId])
}

model GroupMember {
  id         String                 @id @default(cuid())
  role       GroupRole              @default(MEMBER)
  joinedAt   DateTime               @default(now())
  lastActive DateTime               @default(now())
  isActive   Boolean                @default(true)
  reputation Int                    @default(0)
  notes      String?
  userId     String
  groupId    String
  badges     GroupBadgeAssignment[]
  group      Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user       User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId])
  @@index([groupId])
}

model GroupInvitation {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  expiresAt     DateTime?
  message       String?
  status        String    @default("PENDING")
  groupId       String
  invitedById   String
  invitedUserId String
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  invitedBy     User      @relation("InvitingUser", fields: [invitedById], references: [id], onDelete: Cascade)
  invitedUser   User      @relation("InvitedUser", fields: [invitedUserId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([invitedUserId])
  @@index([invitedById])
}

model GroupJoinRequest {
  id        String   @id @default(cuid())
  message   String?
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([groupId])
}

model GroupPost {
  id             String             @id @default(cuid())
  content        String             @db.Text
  status         GroupContentStatus @default(PUBLISHED)
  isPinned       Boolean            @default(false)
  isAnnouncement Boolean            @default(false)
  isEdited       Boolean            @default(false)
  viewCount      Int                @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  userId         String
  groupId        String
  topicId        String?
  comments       GroupComment[]
  group          Group              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  topic          GroupTopic?        @relation(fields: [topicId], references: [id])
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions      GroupReaction[]
  media          Media[]

  @@index([userId])
  @@index([groupId])
  @@index([topicId])
}

model GroupComment {
  id        String             @id @default(cuid())
  content   String             @db.Text
  status    GroupContentStatus @default(PUBLISHED)
  isEdited  Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    String
  postId    String
  parentId  String?
  parent    GroupComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   GroupComment[]     @relation("CommentReplies")
  post      GroupPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions GroupReaction[]

  @@index([userId])
  @@index([postId])
  @@index([parentId])
}

model GroupReaction {
  id        String        @id @default(cuid())
  type      ReactionType
  createdAt DateTime      @default(now())
  userId    String
  postId    String?
  commentId String?
  comment   GroupComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      GroupPost?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model GroupDiscussionTopic {
  id        String                 @id @default(cuid())
  title     String
  content   String                 @db.Text
  isLocked  Boolean                @default(false)
  isPinned  Boolean                @default(false)
  viewCount Int                    @default(0)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  creatorId String
  groupId   String
  replies   GroupDiscussionReply[]
  creator   User                   @relation("TopicCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  group     Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([groupId])
}

model GroupDiscussionReply {
  id               String                 @id @default(cuid())
  content          String                 @db.Text
  isEdited         Boolean                @default(false)
  isAcceptedAnswer Boolean                @default(false)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  creatorId        String
  topicId          String
  parentId         String?
  creator          User                   @relation("ReplyCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  parent           GroupDiscussionReply?  @relation("ReplyReplies", fields: [parentId], references: [id])
  replies          GroupDiscussionReply[] @relation("ReplyReplies")
  topic            GroupDiscussionTopic   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([topicId])
  @@index([parentId])
}

model GroupFile {
  id            String   @id @default(cuid())
  name          String
  description   String?
  fileType      String?
  fileSize      Int?
  fileUrl       String
  thumbnailUrl  String?
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())
  uploaderId    String
  groupId       String
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  uploader      User     @relation("FileUploader", fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([uploaderId])
  @@index([groupId])
}

model GroupEvent {
  id           String                    @id @default(cuid())
  title        String
  description  String?                   @db.Text
  location     String?
  isOnline     Boolean                   @default(false)
  onlineUrl    String?
  startsAt     DateTime
  endsAt       DateTime?
  coverImage   String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  creatorId    String
  groupId      String
  creator      User                      @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  group        Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participants GroupEventParticipation[]

  @@index([creatorId])
  @@index([groupId])
}

model GroupEventParticipation {
  id        String              @id @default(cuid())
  status    ParticipationStatus @default(GOING)
  createdAt DateTime            @default(now())
  eventId   String
  userId    String
  event     GroupEvent          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model GroupPoll {
  id            String            @id @default(cuid())
  question      String            @db.Text
  description   String?           @db.Text
  isMultiChoice Boolean           @default(false)
  isAnonymous   Boolean           @default(false)
  expiresAt     DateTime?
  createdAt     DateTime          @default(now())
  creatorId     String
  groupId       String
  creator       User              @relation("PollCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  group         Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  options       GroupPollOption[]
  votes         GroupPollVote[]

  @@index([creatorId])
  @@index([groupId])
}

model GroupPollOption {
  id     String          @id @default(cuid())
  text   String
  pollId String
  poll   GroupPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes  GroupPollVote[]

  @@index([pollId])
}

model GroupPollVote {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  userId    String
  pollId    String
  optionId  String
  option    GroupPollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll      GroupPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pollId, optionId])
  @@index([userId])
  @@index([pollId])
  @@index([optionId])
}

model GroupBadge {
  id          String                 @id @default(cuid())
  name        String
  description String?                @db.Text
  image       String?
  criteria    String?                @db.Text
  points      Int                    @default(0)
  createdAt   DateTime               @default(now())
  userId      String?
  groupId     String
  group       Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User?                  @relation(fields: [userId], references: [id])
  assignments GroupBadgeAssignment[]

  @@index([userId])
  @@index([groupId])
}

model GroupBadgeAssignment {
  id        String      @id @default(cuid())
  awardedAt DateTime    @default(now())
  reason    String?
  badgeId   String
  memberId  String
  badge     GroupBadge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  member    GroupMember @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([badgeId, memberId])
  @@index([badgeId])
  @@index([memberId])
}

model GroupReport {
  id             String       @id @default(cuid())
  type           ReportType
  reason         String       @db.Text
  status         ReportStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  resolvedAt     DateTime?
  creatorId      String
  groupId        String
  reportedUserId String?
  postId         String?
  commentId      String?
  creator        User         @relation("ReportCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  group          Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  reportedUser   User?        @relation("ReportedUser", fields: [reportedUserId], references: [id])

  @@index([creatorId])
  @@index([groupId])
  @@index([reportedUserId])
}

// New models for post system enhancements

model PostMention {
  id          String   @id @default(cuid())
  postId      String
  userId      String // The user being mentioned
  mentionerId String // The user who created the mention
  startIndex  Int?
  endIndex    Int?
  createdAt   DateTime @default(now())

  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User @relation("MentionedUser", fields: [userId], references: [id], onDelete: Cascade)
  mentioner User @relation("MentionerUser", fields: [mentionerId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@index([mentionerId])
}

model PostShare {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  platform  SharePlatform
  createdAt DateTime      @default(now())
  message   String?

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model PostReport {
  id            String       @id @default(cuid())
  postId        String
  reporterId    String
  type          ReportType
  reason        String?      @db.Text
  status        ReportStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  resolvedAt    DateTime?
  moderatorId   String?
  moderatorNote String?

  post      Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporter  User  @relation("PostReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  moderator User? @relation("ReportModerator", fields: [moderatorId], references: [id], onDelete: SetNull)

  @@index([postId])
  @@index([reporterId])
  @@index([status])
}

model Poll {
  id                   String    @id @default(cuid())
  postId               String    @unique
  question             String    @db.Text
  allowMultipleChoices Boolean   @default(false)
  isAnonymous          Boolean   @default(false)
  expiresAt            DateTime?
  createdAt            DateTime  @default(now())

  post    Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  options PollOption[]

  @@index([postId])
}

model PollOption {
  id       String @id @default(cuid())
  pollId   String
  text     String
  position Int

  poll  Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes PollVote[]

  @@index([pollId])
}

model PollVote {
  id           String   @id @default(cuid())
  pollOptionId String
  userId       String
  createdAt    DateTime @default(now())

  option PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollOptionId, userId])
  @@index([pollOptionId])
  @@index([userId])
}

model UrlPreview {
  id          String   @id @default(cuid())
  postId      String
  url         String
  title       String?
  description String?
  imageUrl    String?
  domain      String?
  createdAt   DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model AudioRecording {
  id         String   @id @default(cuid())
  postId     String?
  commentId  String?
  url        String
  duration   Int?
  transcript String?
  waveform   String?
  createdAt  DateTime @default(now())

  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([commentId])
}

model PostView {
  id        String   @id @default(cuid())
  postId    String
  userId    String?
  ipAddress String?
  userAgent String?
  referer   String?
  duration  Int?
  createdAt DateTime @default(now())

  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

model PostAnalytics {
  id              String   @id @default(cuid())
  postId          String   @unique
  dailyViews      Json?
  viewsBySource   Json?
  viewsByLocation Json?
  viewsByDevice   Json?
  engagementRate  Float?
  reachCount      Int      @default(0)
  clickCount      Int      @default(0)
  impressionCount Int      @default(0)
  updatedAt       DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

enum Visibility {
  PUBLIC
  FRIENDS
  PRIVATE
  GROUP
  SPECIFIC_USERS
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationDeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

enum NotificationChannel {
  IN_APP
  EMAIL
  PUSH
  SMS
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
  CARE
  CURIOUS
  INSIGHTFUL
  CELEBRATE
  SUPPORT
  FIRE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum ChatRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
  GUEST
  BOT
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  MENTION
  FRIEND_REQUEST
  MESSAGE
  SYSTEM
  GROUP_INVITE
  GROUP_JOIN_REQUEST
  GROUP_JOIN_APPROVED
  GROUP_ROLE_CHANGE
  GROUP_POST
  GROUP_COMMENT
  GROUP_REACTION
  GROUP_EVENT
  GROUP_POLL
  GROUP_ANNOUNCEMENT
  GROUP_MENTION
  GROUP_FILE_UPLOAD
  GROUP_BADGE_AWARDED
  PAGE_INVITE
  PAGE_POST
  PAGE_EVENT
  POST_TRENDING
  CONTENT_REMOVED
  AI_RECOMMENDATION
  HEALTH_REMINDER
  HEALTH_GOAL_ACHIEVED
  SECURITY_ALERT
  ACCOUNT_UPDATE
  REEL_LIKE
  REEL_COMMENT
  REEL_SHARE
  REEL_TRENDING
}

enum Role {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum ParticipationStatus {
  GOING
  MAYBE
  INVITED
  DECLINED
}

enum SharePlatform {
  INTERNAL
  FACEBOOK
  TWITTER
  INSTAGRAM
  WHATSAPP
  TELEGRAM
  EMAIL
  LINK
  OTHER
}

enum EffectType {
  FILTER
  TRANSITION
  STICKER
  TEXT
  AUDIO
  AR
  BACKGROUND
  SPEED
  OTHER
}

enum GroupPrivacy {
  PUBLIC
  PRIVATE
  SECRET
}

enum GroupRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum GroupContentStatus {
  PUBLISHED
  PENDING
  REJECTED
  ARCHIVED
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
  RESOLVED
}

enum ReportType {
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_CONTENT
  OTHER
}

enum PostType {
  TEXT
  PHOTO
  VIDEO
  LINK
  POLL
  AUDIO
  DOCUMENT
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  LOCATION
  CONTACT
  SYSTEM
  VOICE_CALL
  VIDEO_CALL
  POLL
  REPLY
  FORWARDED
  WATCH_TOGETHER
  TRIP_PLAN
  HANDWRITING
  AI_GENERATED
  VOICE_MESSAGE
  STICKER
}

enum CallType {
  AUDIO
  VIDEO
  GROUP_AUDIO
  GROUP_VIDEO
  SCREEN_SHARE
}

enum CallStatus {
  RINGING
  ONGOING
  ENDED
  MISSED
  REJECTED
  BUSY
  FAILED
}

enum TranscriptionQuality {
  LOW
  MEDIUM
  HIGH
}

enum PollStatus {
  ACTIVE
  ENDED
  SCHEDULED
}

enum SharedMediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
  LINK
  LOCATION
}

enum ChatFeatureStatus {
  ENABLED
  DISABLED
  RESTRICTED
}

// Chat system models for enhanced functionality

model ChatSettings {
  id                      String   @id @default(cuid())
  chatId                  String   @unique
  defaultLanguage         String?  @default("en")
  translationEnabled      Boolean  @default(false)
  autoTranslateEnabled    Boolean  @default(false)
  mediaAutoDownload       Boolean  @default(true)
  notificationSound       String?
  messageSound            String?
  callSound               String?
  theme                   String?  @default("default")
  backgroundColor         String?
  messageBoxColor         String?
  fontColor               String?
  fontSize                Int?     @default(14)
  readReceiptsEnabled     Boolean  @default(true)
  typingIndicatorsEnabled Boolean  @default(true)
  mediaQuality            String?  @default("auto")
  autoArchiveAfterDays    Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  enabledFeatures         Json?
  messageRetentionDays    Int?     @default(365)
  e2eEncryptionEnabled    Boolean  @default(false)
  enableVoiceCalls        Boolean  @default(true)
  enableVideoCalls        Boolean  @default(true)
  enableGroupCalls        Boolean  @default(true)
  enableScreenSharing     Boolean  @default(true)
  enableMessageThreads    Boolean  @default(true)
  enableReactions         Boolean  @default(true)
  enablePolls             Boolean  @default(true)
  enableWatchTogether     Boolean  @default(true)
  enableHandwriting       Boolean  @default(true)
  enableTripPlanning      Boolean  @default(true)
  enableAIAssistant       Boolean  @default(true)
  enableSubtitles         Boolean  @default(true)
  allowBots               Boolean  @default(false)
  chat                    Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model ChatThread {
  id               String    @id @default(cuid())
  title            String?
  chatId           String
  parentMessageId  String?   @unique
  createdBy        String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isArchived       Boolean   @default(false)
  lastActivityAt   DateTime?
  participantCount Int       @default(0)
  messageCount     Int       @default(0)
  color            String?
  emoji            String?
  chat             Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model MessageReaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model MessageMention {
  id         String   @id @default(cuid())
  messageId  String
  userId     String
  startIndex Int?
  endIndex   Int?
  createdAt  DateTime @default(now())
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([userId])
}

model PinnedMessage {
  id        String    @id @default(cuid())
  messageId String    @unique
  chatId    String
  pinnedBy  String
  pinnedAt  DateTime  @default(now())
  expiresAt DateTime?
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model SharedMedia {
  id           String          @id @default(cuid())
  chatId       String
  messageId    String?
  userId       String
  mediaType    SharedMediaType
  url          String
  thumbnailUrl String?
  fileName     String?
  fileSize     Int?
  duration     Int?
  width        Int?
  height       Int?
  createdAt    DateTime        @default(now())
  chat         Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([userId])
  @@index([mediaType])
}

model ChatPoll {
  id            String           @id @default(cuid())
  question      String
  options       ChatPollOption[]
  votes         ChatPollVote[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  createdBy     String
  chatId        String
  status        PollStatus       @default(ACTIVE)
  expiresAt     DateTime?
  allowMultiple Boolean          @default(false)
  isAnonymous   Boolean          @default(false)
  message       Message?
  chat          Chat             @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model ChatPollOption {
  id       String         @id @default(cuid())
  pollId   String
  text     String
  imageUrl String?
  position Int
  votes    ChatPollVote[]
  poll     ChatPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@index([pollId])
}

model ChatPollVote {
  id            String          @id @default(cuid())
  pollId        String
  optionId      String
  userId        String
  participantId String
  createdAt     DateTime        @default(now())
  option        ChatPollOption  @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll          ChatPoll        @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  participant   ChatParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([pollId, participantId, optionId])
  @@index([pollId])
  @@index([optionId])
  @@index([userId])
  @@index([participantId])
}

model Call {
  id           String            @id @default(cuid())
  type         CallType
  status       CallStatus
  chatId       String
  initiatedBy  String
  startedAt    DateTime          @default(now())
  endedAt      DateTime?
  duration     Int? // Duration in seconds
  hasRecording Boolean           @default(false)
  recordingUrl String?
  participants CallParticipant[]
  callRecords  CallRecord[]
  chat         Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([initiatedBy])
  @@index([status])
}

model CallParticipant {
  id                String          @id @default(cuid())
  callId            String
  participantId     String
  joinedAt          DateTime        @default(now())
  leftAt            DateTime?
  deviceInfo        String?
  hasVideo          Boolean         @default(false)
  hasAudio          Boolean         @default(true)
  isScreenSharing   Boolean         @default(false)
  pinned            Boolean         @default(false)
  connectionQuality String?         @default("good")
  call              Call            @relation(fields: [callId], references: [id], onDelete: Cascade)
  participant       ChatParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([callId])
  @@index([participantId])
}

model CallRecord {
  id                String                @id @default(cuid())
  callId            String
  messageId         String                @unique
  durationSeconds   Int
  participantCount  Int
  recordingUrl      String?
  transcriptUrl     String?
  transcriptText    String?               @db.Text
  transcriptQuality TranscriptionQuality?
  aiSummary         String?               @db.Text
  summaryKeyPoints  Json?
  hasScreenshare    Boolean               @default(false)
  callType          CallType
  createdAt         DateTime              @default(now())
  call              Call                  @relation(fields: [callId], references: [id], onDelete: Cascade)
  message           Message               @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([callId])
}

model WatchTogetherSession {
  id              String    @id @default(cuid())
  chatId          String
  createdBy       String
  mediaUrl        String
  mediaTitle      String?
  mediaThumbnail  String?
  mediaType       String    @default("video")
  mediaSource     String    @default("youtube")
  mediaLengthSec  Int?
  currentPosition Int       @default(0)
  isPlaying       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  endedAt         DateTime?
  participants    Json?

  @@index([chatId])
  @@index([createdBy])
}

model TripPlan {
  id                String    @id @default(cuid())
  chatId            String
  createdBy         String
  destination       String
  startDate         DateTime?
  endDate           DateTime?
  budget            Decimal?  @db.Decimal(10, 2)
  currency          String?   @default("USD")
  participants      Json?
  description       String?   @db.Text
  activities        Json?
  accommodation     Json?
  transportation    Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  status            String    @default("planning")
  aiGenerated       Boolean   @default(false)
  sharedCalendarUrl String?
  locationLat       Float?
  locationLng       Float?

  @@index([chatId])
  @@index([createdBy])
}

model HandwritingMessage {
  id              String   @id @default(cuid())
  messageId       String   @unique
  strokes         Json // Stores stroke data for the handwriting
  backgroundColor String?
  penColor        String?  @default("#000000")
  penWidth        Int?     @default(2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  convertedText   String?  @db.Text

  @@index([messageId])
}

model ChatBot {
  id              String   @id @default(cuid())
  name            String
  displayName     String
  avatarUrl       String?
  description     String?  @db.Text
  creatorUserId   String?
  isVerified      Boolean  @default(false)
  isPublic        Boolean  @default(false)
  capabilities    Json? // Array of capabilities like ["translation", "trivia", "reminders"]
  commands        Json? // Available commands for this bot
  triggerKeywords Json? // Keywords that trigger the bot
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  aiModel         String?  @default("gemini-pro")
  systemPrompt    String?  @db.Text
  isEnabled       Boolean  @default(true)
  metadata        Json?
  creator         User?    @relation(fields: [creatorUserId], references: [id], onDelete: SetNull)

  @@index([creatorUserId])
}

model ChatBotInvocation {
  id              String   @id @default(cuid())
  chatId          String
  messageId       String?
  botId           String
  command         String?
  parameters      Json?
  result          String?  @db.Text
  isSuccess       Boolean
  errorMessage    String?
  createdAt       DateTime @default(now())
  executionTimeMs Int?
  tokensUsed      Int?

  @@index([chatId])
  @@index([botId])
  @@index([messageId])
}

model TranslationCache {
  id             String    @id @default(cuid())
  sourceText     String    @db.Text
  sourceLanguage String
  targetLanguage String
  translatedText String    @db.Text
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  tokenCount     Int       @default(0)
  provider       String    @default("gemini")
  quality        String?
  contextId      String? // For contextual translations (e.g., chat session ID)

  @@index([sourceLanguage, targetLanguage])
  @@index([contextId])
}

model UserChatPreference {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  preferredLanguage        String?  @default("en")
  autoTranslationEnabled   Boolean  @default(false)
  translateTo              String? // Target language code
  defaultNotificationSound String?
  subtitlesEnabled         Boolean  @default(true)
  subtitlesLanguage        String?  @default("en")
  subtitlesSize            Int?     @default(16)
  subtitlesColor           String?  @default("#FFFFFF")
  subtitlesBackgroundColor String?  @default("#000000")
  subtitlesPosition        String?  @default("bottom")
  voiceCallTranscription   Boolean  @default(true)
  handwritingRecognition   Boolean  @default(true)
  botEnabled               Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

//wow

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                           @id @default(cuid())
  name                            String?
  email                           String?                          @unique
  emailVerified                   DateTime?
  image                           String?
  hashedPassword                  String?
  username                        String?                          @unique
  bio                             String?
  createdAt                       DateTime                         @default(now())
  updatedAt                       DateTime                         @updatedAt
  coverImage                      String?
  location                        String?
  website                         String?
  occupation                      String?
  phoneNumber                     String?
  language                        String                           @default("en")
  theme                           String                           @default("system")
  aiChatInteractions              AIChatInteraction[]
  aiContentAnalyses               AIContentAnalysis[]
  aiHealthRecommendations         AIHealthRecommendation[]
  aiTokenLimit                    AITokenLimit?
  accounts                        Account[]
  chatParticipations              ChatParticipant[]
  comments                        Comment[]
  createdEvents                   Event[]
  eventComments                   EventComment[]
  eventMedia                      EventMedia[]
  eventParticipations             EventParticipation[]
  eventUpdates                    EventUpdate[]
  following                       Follow[]                         @relation("FollowerUser")
  followers                       Follow[]                         @relation("FollowingUser")
  friendsOf                       Friendship[]                     @relation("FriendsOfUser")
  friends                         Friendship[]                     @relation("UserFriends")
  createdGroups                   Group[]                          @relation("GroupCreator")
  groupBadges                     GroupBadge[]
  groupComments                   GroupComment[]
  groupDiscussionReplies          GroupDiscussionReply[]           @relation("ReplyCreator")
  groupDiscussionTopics           GroupDiscussionTopic[]           @relation("TopicCreator")
  groupEvents                     GroupEvent[]                     @relation("EventCreator")
  groupEventParticipations        GroupEventParticipation[]
  groupFileUploads                GroupFile[]                      @relation("FileUploader")
  sentGroupInvitations            GroupInvitation[]                @relation("InvitingUser")
  groupInvitations                GroupInvitation[]                @relation("InvitedUser")
  groupJoinRequests               GroupJoinRequest[]
  groupMemberships                GroupMember[]
  groupPolls                      GroupPoll[]                      @relation("PollCreator")
  groupPollVotes                  GroupPollVote[]
  groupPosts                      GroupPost[]
  groupReactions                  GroupReaction[]
  groupReports                    GroupReport[]                    @relation("ReportCreator")
  groupReportedContent            GroupReport[]                    @relation("ReportedUser")
  healthProfile                   HealthProfile?
  receivedMessages                Message[]                        @relation("MessageReceiver")
  sentMessages                    Message[]                        @relation("MessageSender")
  notifications                   Notification[]                   @relation("NotificationRecipient")
  notificationsSent               Notification[]                   @relation("NotificationSender")
  notificationCategoryPreferences NotificationCategoryPreference[]
  notificationGroupPreferences    NotificationGroupPreference[]
  notificationPreferences         NotificationPreference?
  ownedPages                      Page[]                           @relation("PageOwner")
  pageRoles                       PageRole[]
  posts                           Post[]
  pushDevices                     PushDevice[]
  reactions                       Reaction[]
  reels                           Reel[]
  reelComments                    ReelComment[]
  reelLikes                       ReelLike[]
  reelShares                      ReelShare[]
  reelViews                       ReelView[]
  savedPosts                      SavedPost[]
  savedReels                      SavedReel[]
  sessions                        Session[]
  stories                         Story[]
  viewedStories                   StoryView[]
  interests                       UserInterest[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String        @id @default(cuid())
  content    String
  published  Boolean       @default(true)
  visibility Visibility    @default(PUBLIC)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  userId     String
  aiAnalysis AIAnalysis?
  comments   Comment[]
  media      Media[]
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashtags   PostHashtag[]
  reactions  Reaction[]
  savedBy    SavedPost[]

  @@index([userId])
}

model Media {
  id           String     @id @default(cuid())
  type         MediaType
  url          String
  thumbnailUrl String?
  createdAt    DateTime   @default(now())
  postId       String?
  commentId    String?
  messageId    String?
  storyId      String?
  reelId       String?
  bitrate      Int?
  codec        String?
  duration     Float?
  fileSize     Int?
  groupPostId  String?
  height       Int?
  resolution   String?
  width        Int?
  comment      Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  groupPost    GroupPost? @relation(fields: [groupPostId], references: [id], onDelete: Cascade)
  message      Message?   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  post         Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  reel         Reel?      @relation(fields: [reelId], references: [id], onDelete: Cascade)
  story        Story?     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([commentId])
  @@index([messageId])
  @@index([storyId])
  @@index([reelId])
  @@index([groupPostId])
}

model Comment {
  id        String     @id @default(cuid())
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  postId    String
  parentId  String?
  parent    Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]  @relation("CommentReplies")
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  media     Media[]
  reactions Reaction[]

  @@index([userId])
  @@index([postId])
  @@index([parentId])
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  createdAt DateTime     @default(now())
  userId    String
  postId    String?
  commentId String?
  comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("FollowerUser", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowingUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Friendship {
  id        String           @id @default(cuid())
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  friendId  String
  friend    User             @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  user      User             @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Chat {
  id           String            @id @default(cuid())
  name         String?
  isGroup      Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id                String   @id @default(cuid())
  role              ChatRole @default(MEMBER)
  createdAt         DateTime @default(now())
  chatId            String
  userId            String
  lastReadMessageId String?
  chat              Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  lastReadMessage   Message? @relation(fields: [lastReadMessageId], references: [id])
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
}

model Message {
  id         String            @id @default(cuid())
  content    String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  isDeleted  Boolean           @default(false)
  expiresAt  DateTime?
  chatId     String
  senderId   String
  receiverId String?
  readBy     ChatParticipant[]
  media      Media[]
  chat       Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  receiver   User?             @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender     User              @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id                      String                      @id @default(cuid())
  type                    NotificationType
  content                 String?
  isRead                  Boolean                     @default(false)
  createdAt               DateTime                    @default(now())
  recipientId             String
  senderId                String?
  postId                  String?
  commentId               String?
  messageId               String?
  url                     String?
  actionLabel             String?
  actionUrl               String?
  deliveredAt             DateTime?
  deliveryStatus          NotificationDeliveryStatus? @default(PENDING)
  expiresAt               DateTime?
  groupBadgeId            String?
  groupCommentId          String?
  groupEventId            String?
  groupFileId             String?
  groupId                 String?
  groupPollId             String?
  groupPostId             String?
  healthProfileId         String?
  imageUrl                String?
  isActionable            Boolean                     @default(false)
  isMuted                 Boolean                     @default(false)
  metadata                Json?
  overrideUserPreferences Boolean                     @default(false)
  pageId                  String?
  priority                NotificationPriority        @default(NORMAL)
  readAt                  DateTime?
  group                   Group?                      @relation(fields: [groupId], references: [id])
  page                    Page?                       @relation(fields: [pageId], references: [id])
  recipient               User                        @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender                  User?                       @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([recipientId])
  @@index([senderId])
  @@index([type])
  @@index([createdAt])
  @@index([isRead])
  @@index([groupId])
  @@index([pageId])
}

model Topic {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  createdAt     DateTime       @default(now())
  postHashtags  PostHashtag[]
  reelHashtags  ReelHashtag[]
  userInterests UserInterest[]
}

model UserInterest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@index([userId])
  @@index([topicId])
}

model PostHashtag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  topicId   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([postId, topicId])
  @@index([postId])
  @@index([topicId])
}

model AIAnalysis {
  id               String   @id @default(cuid())
  sentiment        String?
  topics           String?
  suggestions      String?
  detectedEntities String?
  modelVersion     String?
  createdAt        DateTime @default(now())
  postId           String   @unique
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Story {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  expiresAt DateTime
  userId    String
  media     Media[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  views     StoryView[]

  @@index([userId])
}

model StoryView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  storyId   String
  viewerId  String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  viewer    User     @relation(fields: [viewerId], references: [id], onDelete: Cascade)

  @@unique([storyId, viewerId])
  @@index([storyId])
  @@index([viewerId])
}

model Reel {
  id               String         @id @default(cuid())
  caption          String?
  createdAt        DateTime       @default(now())
  userId           String
  aiAnalysis       String?
  aspectRatio      String?
  commentCount     Int            @default(0)
  duration         Float?
  isOriginalAudio  Boolean        @default(true)
  isPublished      Boolean        @default(true)
  likeCount        Int            @default(0)
  processingStatus String         @default("COMPLETED")
  shareCount       Int            @default(0)
  thumbnailUrl     String?
  updatedAt        DateTime       @updatedAt
  viewCount        Int            @default(0)
  visibility       Visibility     @default(PUBLIC)
  media            Media[]
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  audio            ReelAudio?
  comments         ReelComment[]
  hashtags         ReelHashtag[]
  likes            ReelLike[]
  shares           ReelShare[]
  views            ReelView[]
  savedBy          SavedReel[]
  categories       ReelCategory[] @relation("ReelToReelCategory")
  effects          ReelEffect[]   @relation("ReelToReelEffect")

  @@index([userId])
  @@index([viewCount])
  @@index([createdAt])
  @@index([likeCount])
}

model ReelLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  reelId    String
  userId    String
  reel      Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reelId, userId])
  @@index([reelId])
  @@index([userId])
}

model ReelComment {
  id        String        @id @default(cuid())
  content   String
  createdAt DateTime      @default(now())
  reelId    String
  userId    String
  likeCount Int           @default(0)
  parentId  String?
  updatedAt DateTime      @updatedAt
  parent    ReelComment?  @relation("ReelCommentReplies", fields: [parentId], references: [id])
  replies   ReelComment[] @relation("ReelCommentReplies")
  reel      Reel          @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reelId])
  @@index([userId])
  @@index([parentId])
}

model ReelView {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  watchDuration  Float?
  completionRate Float?
  reelId         String
  userId         String
  deviceInfo     String?
  location       String?
  reel           Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reelId])
  @@index([userId])
  @@index([createdAt])
}

model ReelShare {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  platform  SharePlatform
  reelId    String
  userId    String
  reel      Reel          @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reelId])
  @@index([userId])
}

model SavedReel {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  userId     String
  reelId     String
  playlistId String?
  playlist   ReelPlaylist? @relation(fields: [playlistId], references: [id])
  reel       Reel          @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reelId])
  @@index([userId])
  @@index([reelId])
  @@index([playlistId])
}

model ReelHashtag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  reelId    String
  topicId   String
  reel      Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([reelId, topicId])
  @@index([reelId])
  @@index([topicId])
}

model ReelAudio {
  id          String   @id @default(cuid())
  title       String
  artistName  String?
  duration    Float
  audioUrl    String
  waveformUrl String?
  isOriginal  Boolean  @default(false)
  useCount    Int      @default(0)
  createdAt   DateTime @default(now())
  reelId      String?  @unique
  licenseInfo String?
  attribution String?
  reel        Reel?    @relation(fields: [reelId], references: [id])

  @@index([title])
  @@index([useCount])
}

model ReelCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  iconUrl   String?
  createdAt DateTime @default(now())
  reels     Reel[]   @relation("ReelToReelCategory")

  @@index([name])
}

model ReelEffect {
  id          String     @id @default(cuid())
  name        String
  type        EffectType
  description String?
  iconUrl     String?
  settings    Json?
  createdAt   DateTime   @default(now())
  reels       Reel[]     @relation("ReelToReelEffect")

  @@index([name])
  @@index([type])
}

model ReelPlaylist {
  id          String      @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean     @default(false)
  coverImage  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  savedReels  SavedReel[]

  @@index([userId])
}

model Page {
  id            String         @id @default(cuid())
  name          String
  handle        String         @unique
  description   String?
  logoImage     String?
  coverImage    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ownerId       String
  events        Event[]
  notifications Notification[]
  owner         User           @relation("PageOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  roles         PageRole[]

  @@index([ownerId])
}

model PageRole {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  pageId    String
  userId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId])
  @@index([pageId])
  @@index([userId])
}

model Event {
  id                String               @id @default(cuid())
  title             String
  description       String?
  location          String?
  startsAt          DateTime
  endsAt            DateTime?
  coverImage        String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  pageId            String?
  creatorId         String
  categoryId        String?
  isOnline          Boolean              @default(false)
  isPrivate         Boolean              @default(false)
  isRecurring       Boolean              @default(false)
  maxParticipants   Int?
  onlineUrl         String?
  recurrenceEndDate DateTime?
  recurrencePattern String?
  category          EventCategory?       @relation(fields: [categoryId], references: [id])
  creator           User                 @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  page              Page?                @relation(fields: [pageId], references: [id])
  comments          EventComment[]
  media             EventMedia[]
  participants      EventParticipation[]
  eventTags         EventTagRelation[]
  updates           EventUpdate[]

  @@index([pageId])
  @@index([creatorId])
  @@index([categoryId])
  @@index([startsAt])
  @@index([isPrivate])
}

model EventParticipation {
  id               String              @id @default(cuid())
  status           ParticipationStatus @default(GOING)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  eventId          String
  userId           String
  isWaitlisted     Boolean             @default(false)
  waitlistPosition Int?
  event            Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
}

model EventComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   String
  userId    String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model EventUpdate {
  id          String   @id @default(cuid())
  content     String
  isImportant Boolean  @default(false)
  createdAt   DateTime @default(now())
  eventId     String
  userId      String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model EventMedia {
  id        String    @id @default(cuid())
  url       String
  type      MediaType
  createdAt DateTime  @default(now())
  eventId   String
  userId    String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model EventCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  icon        String?
  createdAt   DateTime @default(now())
  events      Event[]
}

model EventTag {
  id        String             @id @default(cuid())
  name      String             @unique
  createdAt DateTime           @default(now())
  events    EventTagRelation[]
}

model EventTagRelation {
  id      String   @id @default(cuid())
  eventId String
  tagId   String
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag     EventTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([eventId, tagId])
  @@index([eventId])
  @@index([tagId])
}

model HealthProfile {
  id                  String                   @id @default(cuid())
  age                 Int?
  weight              Float?
  height              Float?
  gender              String?
  activityLevel       String?
  goals               String?
  dietaryRestrictions String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  userId              String                   @unique
  aiRecommendations   AIHealthRecommendation[]
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealPlans           MealPlan[]
  progressRecords     ProgressRecord[]
  workoutPlans        WorkoutPlan[]
}

model MealPlan {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  profileId   String
  meals       Meal[]
  profile     HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Meal {
  id       String   @id @default(cuid())
  name     String
  type     String
  calories Int?
  protein  Int?
  carbs    Int?
  fat      Int?
  recipe   String?
  imageUrl String?
  planId   String
  plan     MealPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
}

model WorkoutPlan {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  profileId   String
  workouts    Workout[]
  profile     HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Workout {
  id          String            @id @default(cuid())
  name        String
  duration    Int?
  type        String
  description String?
  videoUrl    String?
  planId      String
  plan        WorkoutPlan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  exercises   WorkoutExercise[]

  @@index([planId])
}

model WorkoutExercise {
  id        String  @id @default(cuid())
  name      String
  sets      Int?
  reps      Int?
  duration  Int?
  restTime  Int?
  notes     String?
  workoutId String
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@index([workoutId])
}

model ProgressRecord {
  id           String        @id @default(cuid())
  date         DateTime      @default(now())
  weight       Float?
  energyLevel  Int?
  sleepQuality Int?
  notes        String?
  photoUrl     String?
  profileId    String
  profile      HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model AITokenLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  tier      String   @default("FREE")
  limit     Int      @default(150)
  usage     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIContentAnalysis {
  id                   String   @id @default(cuid())
  userId               String
  content              String
  sentiment            String
  topics               String
  engagementPrediction String
  modelUsed            String
  tokenUsage           Int
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AIHealthRecommendation {
  id              String        @id @default(cuid())
  userId          String
  healthProfileId String
  goals           String
  recommendations String
  modelUsed       String
  tokenUsage      Int
  createdAt       DateTime      @default(now())
  healthProfile   HealthProfile @relation(fields: [healthProfileId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([healthProfileId])
}

model NotificationPreference {
  id                 String   @id @default(cuid())
  emailEnabled       Boolean  @default(true)
  pushEnabled        Boolean  @default(true)
  inAppEnabled       Boolean  @default(true)
  smsEnabled         Boolean  @default(false)
  quietHoursEnabled  Boolean  @default(false)
  quietHoursStart    String?
  quietHoursEnd      String?
  quietHoursDays     String?
  weekendMuteEnabled Boolean  @default(false)
  digestEnabled      Boolean  @default(false)
  digestFrequency    String?  @default("DAILY")
  digestDay          String?
  digestTime         String?
  updatedAt          DateTime @updatedAt
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationCategoryPreference {
  id           String               @id @default(cuid())
  category     String
  inAppEnabled Boolean              @default(true)
  emailEnabled Boolean              @default(false)
  pushEnabled  Boolean              @default(true)
  smsEnabled   Boolean              @default(false)
  muteAll      Boolean              @default(false)
  muteUntil    DateTime?
  priority     NotificationPriority @default(NORMAL)
  updatedAt    DateTime             @updatedAt
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
  @@index([userId])
}

model NotificationGroupPreference {
  id                String    @id @default(cuid())
  inAppEnabled      Boolean   @default(true)
  emailEnabled      Boolean   @default(false)
  pushEnabled       Boolean   @default(true)
  muteAll           Boolean   @default(false)
  muteUntil         DateTime?
  postsEnabled      Boolean   @default(true)
  commentsEnabled   Boolean   @default(true)
  eventsEnabled     Boolean   @default(true)
  pollsEnabled      Boolean   @default(true)
  mentionsEnabled   Boolean   @default(true)
  announcementsOnly Boolean   @default(false)
  updatedAt         DateTime  @updatedAt
  userId            String
  groupId           String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model PushDevice {
  id          String   @id @default(cuid())
  deviceToken String   @unique
  platform    String
  deviceName  String?
  deviceModel String?
  osVersion   String?
  appVersion  String?
  isActive    Boolean  @default(true)
  lastActive  DateTime @default(now())
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceToken])
}

model ScheduledNotification {
  id                String                @id @default(cuid())
  type              NotificationType
  content           String?
  scheduledFor      DateTime
  recurring         Boolean               @default(false)
  recurrencePattern String?
  recurrenceEnd     DateTime?
  channels          String?
  priority          NotificationPriority  @default(NORMAL)
  status            String                @default("PENDING")
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  recipientId       String?
  segmentId         String?
  groupId           String?
  entityType        String?
  entityId          String?
  metadata          Json?
  sentCount         Int                   @default(0)
  openCount         Int                   @default(0)
  clickCount        Int                   @default(0)
  templateId        String?
  template          NotificationTemplate? @relation(fields: [templateId], references: [id])

  @@index([recipientId])
  @@index([scheduledFor])
  @@index([status])
  @@index([groupId])
}

model NotificationTemplate {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  type                   NotificationType
  titleTemplate          String?
  contentTemplate        String
  actionLabel            String?
  actionUrlTemplate      String?
  imageUrl               String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  variables              Json?
  channels               String
  priority               NotificationPriority    @default(NORMAL)
  scheduledNotifications ScheduledNotification[]
}

model NotificationLog {
  id             String              @id @default(cuid())
  notificationId String
  userId         String
  channel        NotificationChannel
  event          String
  deviceId       String?
  deviceInfo     Json?
  timestamp      DateTime            @default(now())
  success        Boolean             @default(true)
  errorMessage   String?
  metadata       Json?

  @@index([notificationId])
  @@index([userId])
  @@index([channel])
  @@index([event])
  @@index([timestamp])
}

model AIChatInteraction {
  id          String   @id @default(cuid())
  userId      String
  userMessage String
  aiResponse  String
  modelUsed   String
  tokenUsage  Int
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Group {
  id                  String                 @id @default(cuid())
  name                String
  handle              String                 @unique
  description         String?
  privacy             GroupPrivacy           @default(PUBLIC)
  rules               String?
  logoImage           String?
  coverImage          String?
  isVerified          Boolean                @default(false)
  autoApproveMembers  Boolean                @default(true)
  allowMemberPosts    Boolean                @default(true)
  requirePostApproval Boolean                @default(false)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  creatorId           String
  creator             User                   @relation("GroupCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  badges              GroupBadge[]
  discussionTopics    GroupDiscussionTopic[]
  events              GroupEvent[]
  files               GroupFile[]
  invitations         GroupInvitation[]
  joinRequests        GroupJoinRequest[]
  members             GroupMember[]
  polls               GroupPoll[]
  posts               GroupPost[]
  reports             GroupReport[]
  settings            GroupSettings?
  topics              GroupTopic[]
  notifications       Notification[]

  @@index([creatorId])
}

model GroupSettings {
  id                          String  @id @default(cuid())
  welcomeMessage              String?
  primaryColor                String?
  enableMemberList            Boolean @default(true)
  enableDiscussions           Boolean @default(true)
  enableFiles                 Boolean @default(true)
  enableEvents                Boolean @default(true)
  enablePolls                 Boolean @default(true)
  postNotificationsEnabled    Boolean @default(true)
  commentNotificationsEnabled Boolean @default(true)
  eventNotificationsEnabled   Boolean @default(true)
  allowNonMemberView          Boolean @default(true)
  groupId                     String  @unique
  group                       Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model GroupTopic {
  id          String      @id @default(cuid())
  name        String
  description String?
  color       String?
  icon        String?
  createdAt   DateTime    @default(now())
  groupId     String
  posts       GroupPost[]
  group       Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, name])
  @@index([groupId])
}

model GroupMember {
  id         String                 @id @default(cuid())
  role       GroupRole              @default(MEMBER)
  joinedAt   DateTime               @default(now())
  lastActive DateTime               @default(now())
  isActive   Boolean                @default(true)
  reputation Int                    @default(0)
  notes      String?
  userId     String
  groupId    String
  badges     GroupBadgeAssignment[]
  group      Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user       User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId])
  @@index([groupId])
}

model GroupInvitation {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  expiresAt     DateTime?
  message       String?
  status        String    @default("PENDING")
  groupId       String
  invitedById   String
  invitedUserId String
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  invitedBy     User      @relation("InvitingUser", fields: [invitedById], references: [id], onDelete: Cascade)
  invitedUser   User      @relation("InvitedUser", fields: [invitedUserId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([invitedUserId])
  @@index([invitedById])
}

model GroupJoinRequest {
  id        String   @id @default(cuid())
  message   String?
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([groupId])
}

model GroupPost {
  id             String             @id @default(cuid())
  content        String
  status         GroupContentStatus @default(PUBLISHED)
  isPinned       Boolean            @default(false)
  isAnnouncement Boolean            @default(false)
  isEdited       Boolean            @default(false)
  viewCount      Int                @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  userId         String
  groupId        String
  topicId        String?
  comments       GroupComment[]
  group          Group              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  topic          GroupTopic?        @relation(fields: [topicId], references: [id])
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions      GroupReaction[]
  media          Media[]

  @@index([userId])
  @@index([groupId])
  @@index([topicId])
}

model GroupComment {
  id        String             @id @default(cuid())
  content   String
  status    GroupContentStatus @default(PUBLISHED)
  isEdited  Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    String
  postId    String
  parentId  String?
  parent    GroupComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   GroupComment[]     @relation("CommentReplies")
  post      GroupPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions GroupReaction[]

  @@index([userId])
  @@index([postId])
  @@index([parentId])
}

model GroupReaction {
  id        String        @id @default(cuid())
  type      ReactionType
  createdAt DateTime      @default(now())
  userId    String
  postId    String?
  commentId String?
  comment   GroupComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      GroupPost?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model GroupDiscussionTopic {
  id        String                 @id @default(cuid())
  title     String
  content   String
  isLocked  Boolean                @default(false)
  isPinned  Boolean                @default(false)
  viewCount Int                    @default(0)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  creatorId String
  groupId   String
  replies   GroupDiscussionReply[]
  creator   User                   @relation("TopicCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  group     Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([groupId])
}

model GroupDiscussionReply {
  id               String                 @id @default(cuid())
  content          String
  isEdited         Boolean                @default(false)
  isAcceptedAnswer Boolean                @default(false)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  creatorId        String
  topicId          String
  parentId         String?
  creator          User                   @relation("ReplyCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  parent           GroupDiscussionReply?  @relation("ReplyReplies", fields: [parentId], references: [id])
  replies          GroupDiscussionReply[] @relation("ReplyReplies")
  topic            GroupDiscussionTopic   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([topicId])
  @@index([parentId])
}

model GroupFile {
  id            String   @id @default(cuid())
  name          String
  description   String?
  fileType      String?
  fileSize      Int?
  fileUrl       String
  thumbnailUrl  String?
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())
  uploaderId    String
  groupId       String
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  uploader      User     @relation("FileUploader", fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([uploaderId])
  @@index([groupId])
}

model GroupEvent {
  id           String                    @id @default(cuid())
  title        String
  description  String?
  location     String?
  isOnline     Boolean                   @default(false)
  onlineUrl    String?
  startsAt     DateTime
  endsAt       DateTime?
  coverImage   String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  creatorId    String
  groupId      String
  creator      User                      @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  group        Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participants GroupEventParticipation[]

  @@index([creatorId])
  @@index([groupId])
}

model GroupEventParticipation {
  id        String              @id @default(cuid())
  status    ParticipationStatus @default(GOING)
  createdAt DateTime            @default(now())
  eventId   String
  userId    String
  event     GroupEvent          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model GroupPoll {
  id            String            @id @default(cuid())
  question      String
  description   String?
  isMultiChoice Boolean           @default(false)
  isAnonymous   Boolean           @default(false)
  expiresAt     DateTime?
  createdAt     DateTime          @default(now())
  creatorId     String
  groupId       String
  creator       User              @relation("PollCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  group         Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  options       GroupPollOption[]
  votes         GroupPollVote[]

  @@index([creatorId])
  @@index([groupId])
}

model GroupPollOption {
  id     String          @id @default(cuid())
  text   String
  pollId String
  poll   GroupPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes  GroupPollVote[]

  @@index([pollId])
}

model GroupPollVote {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  userId    String
  pollId    String
  optionId  String
  option    GroupPollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll      GroupPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pollId, optionId])
  @@index([userId])
  @@index([pollId])
  @@index([optionId])
}

model GroupBadge {
  id          String                 @id @default(cuid())
  name        String
  description String?
  image       String?
  criteria    String?
  points      Int                    @default(0)
  createdAt   DateTime               @default(now())
  userId      String?
  groupId     String
  group       Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User?                  @relation(fields: [userId], references: [id])
  assignments GroupBadgeAssignment[]

  @@index([userId])
  @@index([groupId])
}

model GroupBadgeAssignment {
  id        String      @id @default(cuid())
  awardedAt DateTime    @default(now())
  reason    String?
  badgeId   String
  memberId  String
  badge     GroupBadge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  member    GroupMember @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([badgeId, memberId])
  @@index([badgeId])
  @@index([memberId])
}

model GroupReport {
  id             String       @id @default(cuid())
  type           ReportType
  reason         String
  status         ReportStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  resolvedAt     DateTime?
  creatorId      String
  groupId        String
  reportedUserId String?
  postId         String?
  commentId      String?
  creator        User         @relation("ReportCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  group          Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  reportedUser   User?        @relation("ReportedUser", fields: [reportedUserId], references: [id])

  @@index([creatorId])
  @@index([groupId])
  @@index([reportedUserId])
}

enum Visibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationDeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

enum NotificationChannel {
  IN_APP
  EMAIL
  PUSH
  SMS
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum ChatRole {
  ADMIN
  MEMBER
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  MENTION
  FRIEND_REQUEST
  MESSAGE
  SYSTEM
  GROUP_INVITE
  GROUP_JOIN_REQUEST
  GROUP_JOIN_APPROVED
  GROUP_ROLE_CHANGE
  GROUP_POST
  GROUP_COMMENT
  GROUP_REACTION
  GROUP_EVENT
  GROUP_POLL
  GROUP_ANNOUNCEMENT
  GROUP_MENTION
  GROUP_FILE_UPLOAD
  GROUP_BADGE_AWARDED
  PAGE_INVITE
  PAGE_POST
  PAGE_EVENT
  POST_TRENDING
  CONTENT_REMOVED
  AI_RECOMMENDATION
  HEALTH_REMINDER
  HEALTH_GOAL_ACHIEVED
  SECURITY_ALERT
  ACCOUNT_UPDATE
  REEL_LIKE
  REEL_COMMENT
  REEL_SHARE
  REEL_TRENDING
}

enum Role {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum ParticipationStatus {
  GOING
  MAYBE
  INVITED
  DECLINED
}

enum SharePlatform {
  INTERNAL
  FACEBOOK
  TWITTER
  INSTAGRAM
  WHATSAPP
  TELEGRAM
  EMAIL
  LINK
  OTHER
}

enum EffectType {
  FILTER
  TRANSITION
  STICKER
  TEXT
  AUDIO
  AR
  BACKGROUND
  SPEED
  OTHER
}

enum GroupPrivacy {
  PUBLIC
  PRIVATE
  SECRET
}

enum GroupRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum GroupContentStatus {
  PUBLISHED
  PENDING
  REJECTED
  ARCHIVED
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
  RESOLVED
}

enum ReportType {
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_CONTENT
  OTHER
}
